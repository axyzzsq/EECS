//
//  testc.c
//  myapp
//
//  Created by lichao on 2020/1/30.
//  Copyright © 2020年 lichao. All rights reserved.
//

#include "testc.h"
#include <string.h>
static int rec_status = 0;

void set_status(int status){
    rec_status = status;
}

AVCodecContext* open_coder() {
    
    AVCodecContext* c = NULL;
    
    //创建编码器
    //const AVCodec *PCodec = avcodec_find_encoder(AV_CODEC_ID_MP2);
    const AVCodec *pCodec = avcodec_find_encoder_by_name("libfdk_aac");
    if(!pCodec){
        
    }
    
    c = avcodec_alloc_context3(pCodec);
    if (!c) {
        fprintf(stderr, "Could not allocate audio codec context\n");
        return c;
    }
    
    /* put sample parameters */
    c->bit_rate       = 0; //64000;
    
    /* check that the encoder supports s16 pcm input */
    c->sample_fmt     = AV_SAMPLE_FMT_S16;
    
    /* select other audio parameters supported by the encoder */
    c->sample_rate    = 44100;
    c->channel_layout = AV_CH_LAYOUT_STEREO;
    c->channels       = 2;
    c->profile        = FF_PROFILE_AAC_HE_V2;
    
    /* open it */
    if (avcodec_open2(c, pCodec, NULL) < 0) {
        fprintf(stderr, "Could not open codec\n");
        return c;
    }
    
    return c;
}

struct SwrContext* init_swr(){
    
    SwrContext *swr_ctx = NULL;
    
    //    SwrContext *swr_ctx = swr_alloc();
    //    if (!swr_ctx) {
    //        fprintf(stderr, "Could not allocate resampler context\n");
    //        return;
    //    }
    
    /* set options */
    swr_ctx = swr_alloc_set_opts(NULL,               //上下文
                                 AV_CH_LAYOUT_STEREO,//输出layout
                                 AV_SAMPLE_FMT_S16,  //输出 sample format
                                 44100,              //输出采样率
                                 AV_CH_LAYOUT_STEREO,//输入layout
                                 AV_SAMPLE_FMT_FLT,  //输入 sample format
                                 44100,              //输入采样率
                                 0,                  //下面两个参数与log相关
                                 NULL);
    
    /* initialize the resampling context */
    if (swr_init(swr_ctx) < 0) {
        fprintf(stderr, "Failed to initialize the resampling context\n");
        return NULL;
    }
    
    return swr_ctx;
}

static
void encode(AVCodecContext *ctx,
            AVFrame *frame,
            AVPacket *pkt,
            FILE *output)
{
    int ret;
    char errstr[1024];
    
    /* send the frame for encoding */
    ret = avcodec_send_frame(ctx, frame);
    if (ret < 0) {
        av_strerror(ret, errstr, 1024);
        fprintf(stderr,
                "Error sending the frame to the encoder, %s\n",
                errstr);
        exit(1);
    }
    
    /* read all the available output packets (in general there may be any
     * number of them */
    while (ret >= 0) {
        ret = avcodec_receive_packet(ctx, pkt);
        if (ret == AVERROR(EAGAIN) || ret == AVERROR_EOF){
            return;
        } else if (ret < 0) {
            fprintf(stderr, "Error encoding audio frame\n");
            exit(1);
        }
        
        //
        fwrite(pkt->data, 1, pkt->size, output);
        av_packet_unref(pkt);
    }
}


void rec_audio() {
    
    int ret = 0;
    char errors[1024] = {0, };
//    uint8_t dst_data[4096] = {0,}; //不能用这种方式
    uint8_t **dst_data = NULL;
    uint8_t **src_data = NULL;
    int src_linesize = 0;
    int dst_linesize = 0;

    //ctx
    AVFormatContext *fmt_ctx = NULL;
    AVDictionary *options = NULL;
    
    //pakcet
    int count = 0;
    AVPacket pkt;
    
    //[[video device]:[audio device]]
    char *devicename = ":0";
    
    //set log level
    av_log_set_level(AV_LOG_DEBUG);
    
    //start record
    rec_status = 1;
    
    //register audio device
    avdevice_register_all();
    
    //get format
    AVInputFormat *iformat = av_find_input_format("avfoundation");
    
    //open device
    if((ret = avformat_open_input(&fmt_ctx, devicename, iformat, &options)) < 0 ){
        av_strerror(ret, errors, 1024);
        fprintf(stderr, "Failed to open audio device, [%d]%s\n", ret, errors);
        return;
    }
    
    //找开编码器
    AVCodecContext* c = open_coder();
    
    //create file
    char *out = "/Users/lichao/Downloads/av_base/audio.aac";
    FILE *outfile = fopen(out, "wb+");
    
    /* packet for holding encoded output */
    AVPacket *newpkt = NULL;
    newpkt = av_packet_alloc();
    if (!newpkt) {
        fprintf(stderr, "could not allocate the packet\n");
        exit(1);
    }
    
    /* frame containing input raw audio */
    AVFrame *frame = av_frame_alloc();
    if (!frame) {
        fprintf(stderr, "Could not allocate audio frame\n");
        exit(1);
    }
    
    //初始化帧参数
    frame->nb_samples     = 512;
    frame->format         = AV_SAMPLE_FMT_S16;
    frame->channel_layout = AV_CH_LAYOUT_STEREO;
    
    ret = av_frame_get_buffer(frame, 0);
    if (ret < 0) {
        fprintf(stderr, "Could not allocate audio data buffers\n");
        exit(1);
    }
    
    //初始化重采样上下文
    SwrContext* swr_ctx = init_swr();
    
    //源数据
    av_samples_alloc_array_and_samples(&src_data,
                                       &src_linesize,
                                       2,
                                       512,
                                       AV_SAMPLE_FMT_FLT,
                                       0);
    
    //重采样的数据
    av_samples_alloc_array_and_samples(&dst_data,
                                       &dst_linesize,
                                       2,
                                       512,
                                       AV_SAMPLE_FMT_S16,
                                       0);
    
    //read data from device
    while((ret = av_read_frame(fmt_ctx, &pkt)) == 0 &&
          rec_status) {
        
        av_log(NULL, AV_LOG_INFO,
               "packet size is %d(%p), count=%d \n",
               pkt.size, pkt.data, count);
        
        //按字节拷贝
        memcpy((void*)(src_data[0]), (void*)pkt.data, src_linesize);

        swr_convert(swr_ctx,                   //上下文
                    (uint8_t**)dst_data,       //输出缓冲区
                    512,                       //输出缓冲区采样个数
                    (const uint8_t**)src_data, //输入缓冲区
                    512);                      //输入采样个数
        
        //按字节拷贝
        memcpy((void*)frame->data[0], (void*)dst_data[0], dst_linesize);
        
        //编码
        encode(c, frame, newpkt, outfile);
        
        av_packet_unref(&pkt); //release pkt
    }
    
    //close file
    fclose(outfile);
    
    //释放资源
    if (src_data)
        av_freep(&src_data[0]);
    av_freep(&src_data);
    
    //释放资源
    if (dst_data)
        av_freep(&dst_data[0]);
    av_freep(&dst_data);
    
    //释放重采样上下文
    swr_free(&swr_ctx);
    
    //释放帧空间
    av_frame_free(&frame);
    
    //释放pkt
    av_packet_free(&newpkt);
    
    //释放编解码器上下文
    avcodec_free_context(&c);
    
    //close device and release ctx
    avformat_close_input(&fmt_ctx);

    av_log(NULL, AV_LOG_DEBUG, "finish!\n");
    
    return;
}

#if 0
int main(int argc, char *argv[])
{
    rec_audio();
    return 0;
}
#endif
